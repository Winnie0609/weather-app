{"version":3,"sources":["component/PieChart.js","component/BarChart.js","component/weather.js","App.js","index.js"],"names":["PieChart","value","width","height","percentage","unactive","dasharay","viewBox","className","cx","cy","r","fill","stroke","strokeWidth","strokeDasharray","strokeDashoffset","style","strokeLinecap","x","y","Chart","children","data","preserveAspectRatio","transform","map","day","index","Bar","temp","rx","Barchart","length","maxHeight","barHeight","expenseName","name","WeatherCard","useState","query","setQuery","isCityExist","setIsCityExist","isMultiCity","setIsMultiCity","multiCity","setMultiCity","weatherData","setWeatherData","weatherForecast","setWeatherForecast","barChartData","setBarChartData","isMinTemp","setIsMinTemp","api","e","a","preventDefault","formattedQuery","trim","window","alert","searchApi","fetch","res","json","setCityWoied","woeid","console","error","getWeatherData","woeidID","weatherDataApi","consolidated_weather","getBarChartData","dayjs","applicable_date","format","min_temp","toFixed","max_temp","type","useEffect","weather_state_name","toLowerCase","onSubmit","spellCheck","onChange","target","title","parent","city","onClick","src","weather_state_abbr","alt","the_temp","humidity","slice","id","BarChart","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b17e523.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction PieChart({value, width, height}) {\r\n  const percentage = value\r\n  const unactive = 100 - value\r\n  const dasharay = `${percentage} ${unactive}`\r\n\r\n  return (\r\n      <svg width={width} height={height} viewBox=\"0 0 42 42\" className=\"donut\">\r\n        <circle className=\"donut-hole\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"#fff\"></circle>\r\n        <circle className=\"donut-ring\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\" stroke=\"#d2d3d4\" strokeWidth=\"2\"></circle>\r\n\r\n        <circle className=\"donut-segment\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\" stroke=\"#A292FF\" strokeWidth=\"2\" strokeDasharray={dasharay} strokeDashoffset=\"25\"\r\n      style={{strokeLinecap: \"round\"}}\r\n      ></circle>\r\n\r\n      <g className=\"chart-text\">\r\n        <text x=\"50%\" y=\"45%\" className=\"chart-number\">\r\n          {percentage}%\r\n        </text>\r\n        <text x=\"50%\" y=\"53%\" className=\"chart-item\">\r\n          huminity\r\n        </text>\r\n      </g>\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default PieChart","import React from 'react';\r\nimport '../style/index.css';\r\n\r\nfunction Barchart({data}) {\r\n\r\n  const temp = data\r\n  const maxHeight = 200\r\n  const chartHeight = maxHeight + 20\r\n  const barWidth = 10\r\n  const barMargin = 70\r\n  const numberofBars = temp.length\r\n  let width = numberofBars * (barWidth + barMargin)\r\n\r\n  return (\r\n    <>\r\n      <Chart height={chartHeight} width={width} data={data}>\r\n        {temp.map((data, index) => {\r\n          const barHeight = data.temp * 5;\r\n          return (\r\n            <Bar\r\n              key={index}\r\n              x={index * (barWidth + barMargin)}\r\n              y={chartHeight - barHeight}\r\n              width={barWidth}\r\n              height={barHeight}\r\n              expenseName={data.name}\r\n              temp={data.temp}\r\n            />\r\n          )\r\n        })}\r\n      </Chart> \r\n    </>\r\n  );\r\n}\r\n\r\nconst Chart = ({ children, width, data }) => (\r\n  <svg\r\n    viewBox={`0 0 ${width} 270`}   \r\n    width=\"100%\"\r\n    height=\"70%\"\r\n    preserveAspectRatio=\"xMidYMax meet\"\r\n    className=\"barchart\"\r\n  >\r\n    <g className=\"x axis\" transform=\"translate(-10, -150)\">\r\n      {data.map((day, index) => (\r\n        <text key={index} x={81 * index} y=\"400\">{day.day}</text>\r\n      ))}\r\n    </g>\r\n    {children}\r\n  </svg>\r\n)\r\n\r\nconst Bar = ({ x, y, width, height, temp }) => (\r\n  <>\r\n    <rect x={x} y={y} width={width} height={height} rx=\"5\" fill=\"#5773FF\"/> \r\n    <text x={x + width / 3} y={y - 20}>\r\n        {temp}Â°\r\n    </text>\r\n  </>\r\n)\r\n\r\nexport default Barchart","import React, { useState, useEffect } from \"react\"\r\nimport * as dayjs from 'dayjs'\r\nimport PieChart from \"./PieChart\"\r\nimport BarChart from \"./BarChart\"\r\n\r\nfunction WeatherCard() {\r\n  const [query, setQuery] = useState('')\r\n  const [isCityExist, setIsCityExist] = useState(true)\r\n  const [isMultiCity, setIsMultiCity] = useState(false)\r\n  const [multiCity, setMultiCity] = useState([])\r\n  const [weatherData, setWeatherData] = useState([])\r\n  const [weatherForecast, setWeatherForecast] = useState([])\r\n  const [barChartData, setBarChartData] = useState([])\r\n  const [isMinTemp, setIsMinTemp] = useState(true)\r\n \r\n  const api = `https://www.metaweather.com/api/location`\r\n  \r\n  async function getCity(e) {\r\n    e.preventDefault()\r\n    setWeatherData([])\r\n\r\n    let formattedQuery = query.trim()\r\n    setQuery(formattedQuery)\r\n\r\n    if(query === \"\") {\r\n      window.alert('Please Key in a City :)')\r\n    }\r\n\r\n    try {\r\n      const searchApi = `${api}/search/?query=${query}`\r\n      const res = await fetch(searchApi)\r\n      const data = await res.json()\r\n      setIsCityExist(true)\r\n\r\n      if (data.length === 1) {\r\n        setCityWoied(data[0].woeid)\r\n\r\n      } else if (data.length > 1) {\r\n        setMultiCity(data)\r\n        setIsMultiCity(true)\r\n        \r\n      } else {\r\n        setIsCityExist(false)\r\n      }\r\n    }\r\n    catch(err) {\r\n      console.error(err)\r\n      setIsCityExist(false)\r\n    }\r\n  }\r\n\r\n  function setCityWoied(woeid) {\r\n    getWeatherData(woeid)\r\n    setIsMultiCity(false)\r\n    setIsMinTemp(true)\r\n    setBarChartData([])\r\n  }\r\n  \r\n  async function getWeatherData(woeidID) {\r\n    const weatherDataApi = `${api}/${woeidID}`\r\n    if (woeidID) {\r\n      const res = await fetch(weatherDataApi)\r\n      const data = await res.json()\r\n\r\n      setWeatherData(data)\r\n      setWeatherForecast(data.consolidated_weather)\r\n            \r\n      if(data.consolidated_weather.length > 0) {\r\n        getBarChartData(data.consolidated_weather)\r\n      }\r\n    }\r\n  } \r\n\r\n  function getBarChartData(weatherForecast) {\r\n    const data = weatherForecast.map((day) => {\r\n      return {\r\n        day: dayjs(day.applicable_date).format('ddd'),\r\n        temp: isMinTemp ? day.min_temp.toFixed(0) : day.max_temp.toFixed(0),\r\n        type: isMinTemp ? 'min_temp' : 'max_temp'\r\n      }\r\n    })\r\n    setBarChartData(data)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getWeatherData(2306179)\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    getBarChartData(weatherForecast)\r\n  },[isMinTemp])\r\n\r\n  return (\r\n    <div className=\"weather\">\r\n      <div className=\"section_one\">\r\n        <div className=\"section_one_header\">\r\n        <span>It's</span> \r\n          {weatherForecast.length > 0 ? \r\n             <span>{weatherForecast[0].weather_state_name.toLowerCase()}</span> \r\n             :\r\n             <span>light rain</span>\r\n          }\r\n          <span>in</span> \r\n          <form onSubmit = {getCity}>\r\n            <input\r\n              type=\"text\"\r\n              spellCheck=\"false\"\r\n              name={query}\r\n              onChange={(e) => setQuery(e.target.value)}\r\n            />\r\n          </form>\r\n          <span>.</span>\r\n        </div>\r\n        {weatherData.woeid && \r\n          <p className=\"subtitle city\">{weatherData.title}, {weatherData.parent.title}</p>\r\n        }\r\n      </div>\r\n\r\n      {isCityExist ?\r\n        isMultiCity ? \r\n          <div className=\"country_list\">\r\n            {multiCity.map((city) => (\r\n              <p key={city.woeid} onClick={() => setCityWoied(city.woeid)}>{city.title}</p>\r\n            ))}\r\n          </div>\r\n          :\r\n            weatherForecast.length > 0 ? \r\n              <>\r\n                <div>\r\n                  <p className=\"subtitle\">Today, {dayjs(weatherForecast[0].applicable_date).format(\"MMM DD\")}</p>\r\n                  <div className=\"section_one_content\">\r\n                    <img\r\n                      src={`https://www.metaweather.com/static/img/weather/${weatherForecast[0].weather_state_abbr}.svg`}\r\n                      alt={weatherForecast[0].weather_state_name}\r\n                    />\r\n                    <div className=\"section_one_temp\">\r\n                      <p>{weatherForecast[0].the_temp.toFixed(0)}Â°</p>\r\n                      <p>{weatherForecast[0].min_temp.toFixed(0)} Â°/ {weatherForecast[0].max_temp.toFixed(0)}Â°</p>\r\n                    </div>\r\n                    \r\n                    <PieChart value={weatherForecast[0].humidity}  width={'20%'} height={'20%'}/>\r\n                    \r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"line\"/>\r\n\r\n                <div className=\"section_two\">\r\n                  <p className=\"subtitle\">Daily</p>\r\n\r\n                  <div className=\"section_two_content\">\r\n                    {weatherForecast.slice(1,weatherForecast.length).map((day) => (\r\n                      <div key={day.id} className=\"section_two_item\">\r\n                        <p>{dayjs(day.applicable_date).format(\"ddd\")}</p>\r\n                        <img\r\n                          src={`https://www.metaweather.com/static/img/weather/${day.weather_state_abbr}.svg`}\r\n                          alt={day.weather_state_name}\r\n                        />\r\n                        <p>{day.min_temp.toFixed(0)}Â° / {day.max_temp.toFixed(0)}Â°</p>\r\n                        <PieChart value={day.humidity} width={'50%'} height={'50%'}/>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"line\"/>\r\n\r\n                <div className=\"section_three\">\r\n                  <div className=\"section_three_content\">\r\n                    <p className=\"subtitle\">Temperature of the days</p>\r\n                    <div>\r\n                      <button className={isMinTemp ? \"active\" : \"\"} onClick={() => {setIsMinTemp(true)}}><span>min</span></button>\r\n                      <button className={!isMinTemp ? \"active\" : \"\"} onClick={() => {setIsMinTemp(false)}}><span>max</span></button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <BarChart data={barChartData}/>\r\n\r\n                </div>\r\n              </>\r\n              :\r\n              <div className=\"loading\">\r\n                <p>Loading...</p>\r\n              </div>\r\n        :\r\n        <p className=\"city-not-found\">City not found. Maybe you can find another beautiful city.</p>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WeatherCard","import '../src/style/index.css'\r\nimport Weather from './component/weather'\r\n// import Test from \"./component/Test\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Weather />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}